package com.devstringx.tests.web.RSA;


import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.devstringx.tests.web.RSA.Functions.CommonFunctions;
import com.devstringx.tests.web.RSA.Functions.GmailFeature;
import com.devstringx.utils.AssertionOperations;
import com.devstringx.utils.ElementOperations;
import com.devstringx.utils.ExtentReporterNG;
import com.devstringx.utils.FileOperations;


public class EmailSync extends CommonFunctions{

	public static int rndm = randNum();
	public static String new_email;



	//@Test
	public static void OtherMail_Settings()
	{
		/**Initial Set up with the "Other (Manually specify SMTP/IMAP sever details)" option**/

		Click("ProfileImg_xpath"); //click on ProfileImage
		Click("settingBtn_xpath"); //click on setting button

		Click("MailboxEmailSettings_xpath");//click on IMAP Settings
		Click("OtherRadioButton_xpath");//click on Other Radio Button
		Click("OtherUserName_xpath"); //Click Password Field
		TypeText("OtherUsername_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsusername"));
		Click("OtherPassword_xpath"); //Click Password Field
		TypeText("OtherPassword_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rspassword"));
		Click("SMTPServer_xpath"); //Click SMTP Server Field
		TypeText("SMTPServer_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsserver"));
		Click("SMTPPort_xpath"); //Click SMTP Port Field
		TypeText("SMTPPort_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsport"));		
		Click("SMTPSecureType_xpath"); //open secure type dropdown
		Click("//*[@id='select2-drop']"); //select SSL
		Click("IMAPServer_xpath"); //Click IMAP Server Field		
		TypeText("IMAPServer_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsserver"));
		Click("IMAPPort_xpath"); //Click IMAP Port Field
		TypeText("IMAPPort_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsport"));		
		Click("IMAPSecureType_xpath"); //open secure type dropdown
		Click("//*[@id='select2-drop']"); //select SSL	
		Click("OtherSubmit_xpath"); //select SSL

		/**TypeText("sourceInputBox_id", "Twitter");**/
		/**Half done**/
	}


	//@Test
	public static void EditSMTP_Settings()
	{
		/**Edit SMTP Settings (Already connected to Gmail)**/

		Click("ProfileImg_xpath"); //click on ProfileImage
		Click("settingBtn_xpath"); //click on setting button

		Click("MailboxEmailSettings_xpath");//click on IMAP Settings
		Click("EditSMTPButton_xpath");//click on Edit SMTP button
		Click("OtherRadioButton_xpath");//click on Other Radio Button

		Click("OtherUserName_xpath"); //Click Password Field
		TypeText("OtherUserName_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsusername"));
		Click("OtherPassword_xpath"); //Click Password Field
		TypeText("OtherPassword_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rspassword"));
		Click("SMTPServer_xpath"); //Click SMTP Server Field
		TypeText("SMTPServer_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsserver"));
		Click("SMTPPort_xpath"); //Click SMTP Port Field
		TypeText("SMTPPort_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsport"));		
		Click("SMTPSecureType_xpath"); //open secure type dropdown
		Click("//*[@id='select2-drop']"); //select SSL

		/**TypeText("sourceInputBox_id", "Twitter");**/
		/**Half done**/
	}


	//@Test
	public static void EditIMAP_Settings()
	{
		/**Edit IMAP Settings (Already connected to Gmail)**/

		Click("ProfileImg_xpath"); //click on ProfileImage
		Click("settingBtn_xpath"); //click on setting button

		Click("MailboxEmailSettings_xpath");//click on IMAP Settings
		Click("EditIMAPButton_xpath");//click on Edit SMTP button
		Click("OtherRadioButton_xpath");//click on Other Radio Button

		Click("OtherUserName_xpath"); //Click Password Field
		TypeText("OtherUserName_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsusername"));
		Click("OtherPassword_xpath"); //Click Password Field
		TypeText("OtherPassword_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rspassword"));
		Click("IMAPServer_xpath"); //Click IMAP Server Field		
		TypeText("IMAPServer_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsserver"));
		Click("IMAPPort_xpath"); //Click IMAP Port Field
		TypeText("IMAPPort_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"rsport"));		
		Click("IMAPSecureType_xpath"); //open secure type dropdown
		Click("//*[@id='select2-drop']"); //select SSL	
		Click("OtherSubmit_xpath"); //select SSL

		/**TypeText("sourceInputBox_id", "Twitter");**/
		/**Half done**/
	}



	/**
	 * 1. Authenticate with Gmail / Google Apps Account
	 *
	 * A. Sending Emails
	 * A1. Send email from TieiT after authenticating with Gmail
	 * A1.1 - Enable tracking - check if it shows the email was opened (after A2)
	 * A1.2 - Disable tracking - ensure tracking metrics are not shown in the timeline
	 * A2. Check email inbox of receiver (contact): should have email
	 * A3. Check TieiT sent box of - should have the email
	 * A4. Check TieiT user's Gmail sent folder - sent email should be present
	 * A5. Check contact's timeline - email should be present - sent time and date should match
	 *
	 * B. Receiving Emails
	 * B1. Send an email from contact's gmail account to the TieiT user's gmail account
	 * B2. Email should show in the TieiT user's Inbox + Timeline
	 * B3. Email should not be displayed in another user's account
	 * B4. Ensure that the email should be in the TieiT user's gmail account's inbox
	 *
	 * C. Multiple receivers (CC)
	 * D. Doublts
	 * * If an email is opened in the Gmail Inbox or TieiT inbox, does it mark as opened
	 */
	//@Test
	public static void GmailAuthenticate()
	{
		/**1. Authenticate with Gmail to send and receive emails**/

		Click("ProfileImg_xpath"); //click on ProfileImage
		Click("settingBtn_xpath"); //click on setting button
		Click("MailboxEmailSettings_xpath");//click on Email Sync mailbox Settings
		Click("GmailSelection_Xpath"); //Select Gmail radio button
		Click("GmailAuthenticate_Xpath"); // Select Gmail authentication
		TypeText("GmailUsername_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"gmailusername")); //Enter Gmail username
		Click("GmailUsernameNext_xpath"); //Go to next
		waitUntilWebElementClickable("GmailPassword_xpath", 120);
		TypeText("GmailPassword_xpath",FileOperations.getValueFromPropertyFile(configFilePath,"gmailpass")); //Enter password
		Click("GmailSubmit_xpath"); //Submit password
		waitUntilWebElementClickable("AllowGmail_xpath", 120);
		Click("AllowGmail_xpath"); // Allow Gmail
		// Verify connection - Success message "Connected to Google account"

		// Would like to rename this as a separate test without logging out

		Click("CRMContactTab_xpath"); // Go to CRM > Contacts
		// Open a contact whose email account we cna access
		// Click on Send Email
		// Enter Subject
		// Enter body
		// Send Email
		// Open Gmail
		// Login into the contact's email address
		// Search for email with subject that was sent
		//
	}

	//@Test
	public static void checkEmailInGmail() throws InterruptedException{
		GmailFeature.loginGmail();
		GmailFeature.searchAndOpenEmail("test");
	}

	/***
	 * Send an email out after Sign In with Google option is selected with Track this email not selected
	 * "After Testcase 1 above
           1) Choose a contact (or add a new one) [Note: Make sure you have access to the inbox from Testcase1]
           2) Select Email activity from Action bar or in contact detail card on right side. 
           3) Send Email
           4) Email should be in the sent box for the email account you connected in Testcase 1""After Testcase 1 above
	 * @throws InterruptedException 
	 */
	//@Test(priority=1)
	public static void  verifyTietInboxWithTrackON() throws InterruptedException
	{

		String rndm = generateRandomAlphaNumeric(2);
		String subject = "Tiet Testing Automation"+rndm;
		String url = FileOperations.getValueFromPropertyFile(configFilePath, "baseUrl");
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);

		//check if contact exist
		int elementcount = getWebDriver().findElements(By.xpath("//td/a[text()='testingtiet@gmail.com']")).size();
		if(elementcount==0){
			//Add new Contact
			// Press + CONTACT button (top right corner)
			waitUntilWebElementClickable("PlusContactBtn_xpath",120);
			Click("PlusContactBtn_xpath");

			//  Wait For AddContact Form will be open
			waitUntilWebElementVisible("AddNewContactFormHeader_xpath", 120);

			//Fill Contact Name
			TypeText("firstNameTxtField_xpath", "tietTesting"+rndm);

			//Fill Contact Email 
			TypeText("emailTxtField_xpath","tiettesting@gmail.com");

			//Click on Save and Close"
			Click("saveandCloseBtn_xpath");

			Thread.sleep(1000);
		}

		else
		{
			getWebDriver().findElement(By.xpath("//td/a[text()='testingtiet@gmail.com']")).click();

		}
		Thread.sleep(1000);
		sendMailByActionBar(subject);


		//go to Email sent box
		getWebDriver().navigate().to(url + "mailbox/sent_mails");

		//open sent mail
		Click("firstemail_xpath");


		String open_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'open-mail')]/ancestor::li")).getText();
		String closed_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'c-blue')]/ancestor::li")).getText();
		String delivered_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'mail-delivered')]/ancestor::li")).getText();
		String bounced_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'c-orange')]/ancestor::li")).getText();
		String failed_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'c-red')]/ancestor::li")).getText();


		AssertionOperations.verifyStringsEquality(open_mail,"Opened (0)");

		AssertionOperations.verifyStringsEquality(closed_mail,  "Clicked (0)");

		AssertionOperations.verifyStringsEquality(delivered_mail, "Delivered (0)");
		AssertionOperations.verifyStringsEquality(bounced_mail, "Bounced (0)");
		AssertionOperations.verifyStringsEquality(failed_mail, "Failed (0)");
	}

	/***
	 * Send an email out after Sign In with Google option is selected and check off Track this email
	 * @throws InterruptedException 
	 */
	//@Test(priority=2)
	public static void verifyTietInboxWithTrackOFF() throws InterruptedException{
		String rndm = generateRandomAlphaNumeric(2);
		String subject = "Tiet Testing Automation"+rndm;
		String url = FileOperations.getValueFromPropertyFile(configFilePath, "baseUrl");
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);

		//check if contact exist
		int elementcount = getWebDriver().findElements(By.xpath("//td/a[text()='testingtiet@gmail.com']")).size();
		if(elementcount==0){
			//Add new Contact
			// Press + CONTACT button (top right corner)
			waitUntilWebElementClickable("PlusContactBtn_xpath",120);
			Click("PlusContactBtn_xpath");

			//  Wait For AddContact Form will be open
			waitUntilWebElementVisible("AddNewContactFormHeader_xpath", 120);

			//Fill Contact Name
			TypeText("firstNameTxtField_xpath", "tietTesting"+rndm);

			//Fill Contact Email 
			TypeText("emailTxtField_xpath","tiettesting@gmail.com");

			//Click on Save and Close"
			Click("saveandCloseBtn_xpath");

			Thread.sleep(1000);
		}

		else
		{
			getWebDriver().findElement(By.xpath("//td/a[text()='testingtiet@gmail.com']")).click();

		}

		Thread.sleep(1000);

		Click("actionbarEmailIcon_xpath");
		Thread.sleep(3000);
		waitUntilWebElementVisible("emailSubjectTextField_xpath", 120);
		TypeText("emailSubjectTextField_xpath",subject);

		//check Track OFF checkbox
		Click("trackOFFcheckbox_xpath");
		Thread.sleep(1000);
		Click("emailSendBtn_xpath");

		String successfullMsg  = getText("ValidationPopupmessage_xpath");
		AssertionOperations.verifyStringsEquality(successfullMsg, "Your mail successfully sent.");
		Thread.sleep(1000);
		GmailFeature.loginGmail();
		Thread.sleep(1000);
		GmailFeature.searchAndOpenEmail(subject);


		//go back to tiet
		getWebDriver().navigate().to(url);
		//go to Email sent box
		getWebDriver().navigate().to(url + "mailbox/sent_mails");
		Thread.sleep(1000);
		refreshPage();
		Thread.sleep(1000);
		//open sent mail
		getWebDriver().findElement(By.xpath("//span[text()='"+"Tiet Testing Automation"+rndm+"']")).click();

		Thread.sleep(1000);
		String open_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'open-mail')]/ancestor::li")).getText();
		String closed_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'c-blue')]/ancestor::li")).getText();
		String delivered_mail = getWebDriver().findElement(By.xpath("//div[contains(text(),'"+subject+"')]/ancestor::div/div/ul//i[contains(@class,'mail-delivered')]/ancestor::li")).getText();



		AssertionOperations.verifyStringsEquality(open_mail,"Opened (1)");

		AssertionOperations.verifyStringsEquality(closed_mail,  "Clicked (0)");

		AssertionOperations.verifyStringsEquality(delivered_mail, "Delivered (1)");

	}



	/***
	 * Sign in with Google is connected but turn off SMTP
	 * "1. Login into TieiT
            2. Click on Profile icon at top right corner
            3. Click on settings button
            4. Click on IMAP settings link
            5. Click the Toggle switch above SMTP (set to OFF)"
	 */
	//@Test(priority=3)
	public static void verifyTurnOffSMTP() throws InterruptedException
	{		
		String url = FileOperations.getValueFromPropertyFile(configFilePath, "baseUrl");
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);
		waitUntilWebElementClickable("ProfileImg_xpath", 120);
		Click("ProfileImg_xpath");
		Thread.sleep(2000);

		Click("SettingBtn_xpath");

		Click("MailboxSetting_xpath");
		Click("EmailSync_xpath");

		 int editIMAPBtn = getWebDriver().findElements(By.xpath("//button[contains(text(),'Edit IMAP')]")).size();
			if( editIMAPBtn==0)
			{

				if(getWebDriver().findElements(By.xpath("//img[contains(@src,'google-sync')]")).size()!=0){
					ConnectWithGoogleintoMailbox();
				}
				else{
					Click("SMTPRadioBtnOFF_xpath");
				}
			}
			Click("SMTPRadioBtnOFF_xpath");
		String successfullMsg  = getText("ValidationPopupmessage_xpath");
		AssertionOperations.verifyStringsEquality(successfullMsg, "SMTP turned OFF successfully.");
	}


	//@Test(priority=4)
	public static void verifyTurnOFFIMAP() throws InterruptedException
	{

		String url = FileOperations.getValueFromPropertyFile(configFilePath, "baseUrl");
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);
		waitUntilWebElementClickable("ProfileImg_xpath", 120);
		Click("ProfileImg_xpath");
		Thread.sleep(2000);

		Click("SettingBtn_xpath");

		Click("MailboxSetting_xpath");
		Click("EmailSync_xpath");

		 int editIMAPBtn = getWebDriver().findElements(By.xpath("//button[contains(text(),'Edit IMAP')]")).size();
			if( editIMAPBtn==0)
			{

				if(getWebDriver().findElements(By.xpath("//img[contains(@src,'google-sync')]")).size()!=0){
					ConnectWithGoogleintoMailbox();
				}
				else{
					Click("IMAPRadioBtnOff_xpath");
				}
			}
			Click("IMAPRadioBtn_xpath");
		String successfullMsg  = getText("ValidationPopupmessage_xpath");
		AssertionOperations.verifyStringsEquality(successfullMsg, "IMAP turned OFF successfully.");


	}

	//@Test(priority=5)
	public static void Verifysendmailerror() throws InterruptedException
	{		
		String rndm = generateRandomAlphaNumeric(2);
		String url = FileOperations.getValueFromPropertyFile(configFilePath, "baseUrl");
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);

		waitUntilWebElementClickable("ProfileImg_xpath", 120);
		Click("ProfileImg_xpath");
		Thread.sleep(2000);
		Click("SettingBtn_xpath");

		Click("MailboxSetting_xpath");
		Click("EmailSync_xpath");
        Thread.sleep(1000);
        int editIMAPBtn = getWebDriver().findElements(By.xpath("//button[contains(text(),'Edit IMAP')]")).size();
		if( editIMAPBtn==0)
		{

			if(getWebDriver().findElements(By.xpath("//img[contains(@src,'google-sync')]")).size()!=0){
				ConnectWithGoogleintoMailbox();
			}
			else{
				Click("IMAPRadioBtnOff_xpath");
			}
		}
		Click("IMAPRadioBtn_xpath");
		String successfullMsg  = getText("ValidationPopupmessage_xpath");
		AssertionOperations.verifyStringsEquality(successfullMsg, "IMAP turned OFF successfully.");
		Thread.sleep(1000);
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);

		//check if contact exist
		int elementcount = getWebDriver().findElements(By.xpath("//td/a[text()='testingtiet@gmail.com']")).size();
		if(elementcount==0){
			//Add new Contact
			// Press + CONTACT button (top right corner)
			waitUntilWebElementClickable("PlusContactBtn_xpath",120);
			Click("PlusContactBtn_xpath");

			//  Wait For AddContact Form will be open
			waitUntilWebElementVisible("AddNewContactFormHeader_xpath", 120);

			//Fill Contact Name
			TypeText("firstNameTxtField_xpath", "tietTesting"+rndm);

			//Fill Contact Email 
			TypeText("emailTxtField_xpath","tiettesting@gmail.com");

			//Click on Save and Close"
			Click("saveandCloseBtn_xpath");

			Thread.sleep(1000);
		}

		else
		{
			getWebDriver().findElement(By.xpath("//td/a[text()='testingtiet@gmail.com']")).click();

		}

		Thread.sleep(1000);

		Click("actionbarEmailIcon_xpath");
		Thread.sleep(3000);
		waitUntilWebElementVisible("emailSubjectTextField_xpath", 120);
		TypeText("emailSubjectTextField_xpath","Tiet Testing Automation"+rndm);

		//check Track OFF checkbox
		Click("trackOFFcheckbox_xpath");
		Thread.sleep(1000);
		Click("emailSendBtn_xpath");

		String errMsg  = getText("ValidationPopupmessage_xpath");
		AssertionOperations.verifyStringsEquality(errMsg, "Sorry, unable to send your email. Please try later.");
		Thread.sleep(1000);
		Click("cancelBtn_xpath");

	}
	@Test(priority =1)
	public static void MailstatusshowIndeatilmailsentbox() throws InterruptedException{
		//87
		String rndm = generateRandomAlphaNumeric(2);
		String subject = "Tiet Testing Automation"+rndm;
		String EmailId="pradeep226223@gmail.com";
		String url = FileOperations.getValueFromPropertyFile(configFilePath, "baseUrl");
		getWebDriver().navigate().to(url + "contacts/lists"); // Need to look
		Thread.sleep(1000);

		//check if contact exist
		int elementcount = getWebDriver().findElements(By.xpath("//td/a[text()='"+EmailId+"']")).size();
		if(elementcount==0){
			//Add new Contact
			// Press + CONTACT button (top right corner)
			waitUntilWebElementClickable("PlusContactBtn_xpath",120);
			Click("PlusContactBtn_xpath");

			//  Wait For AddContact Form will be open
			waitUntilWebElementVisible("AddNewContactFormHeader_xpath", 120);

			//Fill Contact Name
			TypeText("firstNameTxtField_xpath", "pradeep"+rndm);

			//Fill Contact Email 
			TypeText("emailTxtField_xpath","pradeep226223@gmail.com");

			//Click on Save and Close"
			Click("saveandCloseBtn_xpath");

			Thread.sleep(1000);
		}

		else
		{
			getWebDriver().findElement(By.xpath("//td/a[text()='pradeep226223@gmail.com']")).click();

		}
		Thread.sleep(1000);
		sendMailByClickingActivity(subject);
		String s=getWebDriver().findElement(By.xpath("//div[@id='tab_3_1']//ul[@class='timeline-tree']//li[1]//span[text()=' Delivered']")).getText();
		AssertionOperations.verifyStringsEquality(s, "Delivered");
		//subject=": "+subject+" ";
		Thread.sleep(5000);
		getWebDriver().navigate().to("https://app.tieit.io/mailbox/sent_mails");
		Thread.sleep(5000);
		int i=getWebDriver().findElements(By.xpath("//span[text()='"+subject+"']")).size();
		 if(i==0){
		    	ExtentReporterNG.screenshotname=takeScreenshot(subject);
				ExtentReporterNG.failurereason = "Sent Email Activity not displayed on timeline of subject= " + subject;
		    	Assert.fail();
		    }
		
	}
}
